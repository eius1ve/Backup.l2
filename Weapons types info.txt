//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package l2.gameserver.templates.item;

import l2.gameserver.stats.Stats;
import l2.gameserver.stats.funcs.FuncTemplate;
import l2.gameserver.templates.StatsSet;

public final class WeaponTemplate extends ItemTemplate {
    private final int Hz;
    private final int HA;
    private final int HB;
    private final int HC;
    private final int HD;
    private final boolean hr;
    private final int HE;
    private int hT;

    public WeaponTemplate(StatsSet var1) {
        super(var1);
        this.type = (ItemType)var1.getEnum("type", WeaponType.class);
        this.Hz = var1.getInteger("soulshots", 0);
        this.HA = var1.getInteger("spiritshots", 0);
        this.hr = var1.getBool("is_magic_weapon", false);
        this.HB = var1.getInteger("rnd_dam", 0);
        this.HC = var1.getInteger("atk_reuse", this.type == WeaponTemplate.WeaponType.BOW ? 1500 : 0);
        this.HD = var1.getInteger("mp_consume", 0);
        switch (this.getItemType()) {
            case BOW -> this.HE = var1.getInteger("attack_range", 500);
            case POLE -> this.HE = var1.getInteger("attack_range", 80);
            default -> this.HE = var1.getInteger("attack_range", 40);
        }

        if (this.getItemType() == WeaponTemplate.WeaponType.NONE) {
            this._type1 = 1;
            this._type2 = 1;
        } else {
            this._type1 = 0;
            this._type2 = 0;
        }

        if (this.getItemType() == WeaponTemplate.WeaponType.PET) {
            this._type1 = 0;
            if (this._bodyPart == -100L) {
                this._type2 = 6;
            } else if (this._bodyPart == -104L) {
                this._type2 = 10;
            } else if (this._bodyPart == -101L) {
                this._type2 = 7;
            } else {
                this._type2 = 8;
            }

            this._bodyPart = 128L;
        }

    }

    public WeaponType getItemType() {
        return (WeaponType)this.type;
    }

    public long getItemMask() {
        return this.getItemType().mask();
    }

    public int getSoulShotCount() {
        return this.Hz;
    }

    public int getSpiritShotCount() {
        return this.HA;
    }

    public int getCritical() {
        return this.hT;
    }

    public int getRandomDamage() {
        return this.HB;
    }

    public int getAttackReuseDelay() {
        return this.HC;
    }

    public int getMpConsume() {
        return this.HD;
    }

    public int getAttackRange() {
        return this.HE;
    }

    public void attachFunc(FuncTemplate var1) {
        if (var1._stat == Stats.CRITICAL_BASE && var1._order == 8) {
            this.hT = (int)Math.round(var1._value / (double)10.0F);
        }

        super.attachFunc(var1);
    }

    public boolean isMageItem() {
        return this.hr;
    }

    public static enum WeaponType implements ItemType {
        NONE(1, "Shield", (Stats)null),
        SWORD(2, "Sword", Stats.SWORD_WPN_VULNERABILITY),
        BLUNT(3, "Blunt", Stats.BLUNT_WPN_VULNERABILITY),
        DAGGER(4, "Dagger", Stats.DAGGER_WPN_VULNERABILITY),
        BOW(5, "Bow", Stats.BOW_WPN_VULNERABILITY),
        POLE(6, "Pole", Stats.POLE_WPN_VULNERABILITY),
        ETC(7, "Etc", (Stats)null),
        FIST(8, "Fist", Stats.FIST_WPN_VULNERABILITY),
        DUAL(9, "Dual Sword", Stats.DUAL_WPN_VULNERABILITY),
        DUALFIST(10, "Dual Fist", Stats.FIST_WPN_VULNERABILITY),
        BIGSWORD(11, "Big Sword", Stats.SWORD_WPN_VULNERABILITY),
        PET(12, "Pet", Stats.FIST_WPN_VULNERABILITY),
        ROD(13, "Rod", (Stats)null),
        BIGBLUNT(14, "Big Blunt", Stats.BLUNT_WPN_VULNERABILITY),
        CROSSBOW(15, "Crossbow", Stats.CROSSBOW_WPN_VULNERABILITY),
        RAPIER(16, "Rapier", Stats.DAGGER_WPN_VULNERABILITY),
        ANCIENTSWORD(17, "Ancient Sword", Stats.SWORD_WPN_VULNERABILITY),
        DUALDAGGER(18, "Dual Dagger", Stats.DAGGER_WPN_VULNERABILITY);

        public static final WeaponType[] VALUES = values();
        private final long ec;
        private final String gM;
        private final Stats c;

        private WeaponType(int var3, String var4, Stats var5) {
            this.ec = 1L << var3;
            this.gM = var4;
            this.c = var5;
        }

        public long mask() {
            return this.ec;
        }

        public Stats getDefence() {
            return this.c;
        }

        public String toString() {
            return this.gM;
        }
    }
}
